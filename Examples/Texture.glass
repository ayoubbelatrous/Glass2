
enum TextureFormat
{
	RGB8;
	RGBA8;
	R8;
};

struct Texture {
	u32 renderer_id;

	u32 width;
	u32 height;
	TextureFormat format;

};

fn TextureFormat_ToGLFormat(TextureFormat f) : i32 {
	i32 gf = 0;

	if f == TextureFormat.RGB8 { gf = GL_RGB; }
	if f == TextureFormat.RGBA8 { gf = GL_RGBA; }
	if f == TextureFormat.R8 { gf = GL_RED; }

	assert(gf, "Unknown Texture Format");

	return gf;
}

fn TextureFormat_ToGLInternalFormat(TextureFormat f) : i32 {

	print("TextureFormat_ToGLInternalFormat\n");

	i32 gf = 0;

	if f == TextureFormat.RGB8 { gf = GL_RGB8; }
	if f == TextureFormat.RGBA8 { gf = GL_RGBA8; }
	if f == TextureFormat.R8 { gf = GL_R8; }

	assert(gf, " TextureFormat_ToGLInternalFormat() :: Unknown Texture Format");

	print("Finished TextureFormat_ToGLInternalFormat\n");

	return gf;
}

fn Texture_Create(u32 width, u32 height, u8[..] data, TextureFormat format) : Texture {

	Texture t;

	t.width 	= width;
	t.height 	= height;
	t.format 	= format;

	print("Texture_Create :: glGenTextures\n");

	glGenTextures(1, &t.renderer_id);

	print("Texture_Create :: glBindTexture\n");

	glBindTexture(GL_TEXTURE_2D, t.renderer_id);

	//glTexImage2D(GL_TEXTURE_2D, 1, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data.data);

	print("Texture_Create :: glTextureStorage2D\n");

	internalformat := TextureFormat_ToGLInternalFormat(format);

	glTextureStorage2D(t.renderer_id, 1, internalformat, width, height);

	print("Texture_Create :: glTexParameteri\n");

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	print("Texture_Create :: glTextureSubImage2D\n");

	gl_format := TextureFormat_ToGLFormat(format);

	glTextureSubImage2D(t.renderer_id, 0, 0, 0, width, height, gl_format, GL_UNSIGNED_BYTE, data.data);

	return t;
}

fn Texture_Bind(Texture* t) {
	glBindTexture(GL_TEXTURE_2D, t.renderer_id);
}
