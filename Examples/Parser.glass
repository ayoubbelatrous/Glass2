struct Allocator {
	u64* data;
	u32 capacity;
	u32 allocated;
};

fn Allocator_Make(u32 pre_allocate) : Allocator {

	assert(pre_allocate, ":: Allocator_Make() pre_allocate must be greater than 0");

	Allocator a;

	a.data = malloc(pre_allocate);
	a.capacity = pre_allocate;
	a.allocated = 0;

	f32 allocated = pre_allocate;

	memset(a.data, 0, pre_allocate);

	log_warn("[INFO] :: Allocator_Make() :: allocated: % KB\n", allocated / 1024.0);

	return a;
}

fn Allocator_Aloc(Allocator* a, u32 size) : u64* {

	a.allocated = a.allocated + size;
	loc := a.data + a.allocated;

	assert(size , " :: Allocator_Aloc() :: cannot allocate 0 bytes!");
	assert((a.allocated - 1) < a.capacity, " :: Allocator_Aloc() :: not enough memory");

	return loc;
}

struct Parser {
	Allocator alloc;

	TokenList tk_list;
	u32 location;
};

fn Is_Fn(string str) : bool {

	if str.data[0] == "f"[0] {
		if str.data[1] == "n"[0] {
			return 1;
		}
	}

	return 0;
}

fn Parser_Make(TokenList tk_list) : Parser {
	Parser p;

	p.tk_list = tk_list;
	p.alloc = Allocator_Make(1024 * 1024 * 10);
	p.location = 0;

	return p;
}

fn Parser_Aloc(Parser* p, u32 size) : AstNode* {
	AstNode* node =  Allocator_Aloc(&p.alloc, size);
	return node;
}

fn Parser_At(Parser* p) : Token {
	return p.tk_list.tokens[p.location];
}

fn Parser_Consume(Parser* p) {
	p.location = p.location + 1;
}

fn Parser_Expect(Parser* p, Token_Type t) : bool {
	current := Parser_At(p);
	return current.type != t;
}

fn Parser_Identifier(Parser* p) : AstNode* {

	current := Parser_At(p);
	assert(cast(i32) (current.type == Token_Type.IDEN), " :: Parser_Identifier() :: Current Token Is Not An Identifier");

	AstNode_Ident* identifier = Parser_Aloc(p, sizeof(AstNode_Ident));

	identifier.type = AstNode_Type.Ident;
	identifier.kind = AstNode_Kind.Expr;
	identifier.symbol = current;

	Parser_Consume(p);

	return identifier;
}

fn Parser_PrimaryExpression(Parser* p) : AstNode* {

	current := Parser_At(p);

	if current.type == Token_Type.IDEN {
		return Parser_Identifier(p);
	}

	assert(0, " :: Parser_PrimaryExpression() :: Un-Reachable");
}

fn Parser_ParseAddExpr(Parser* p) : AstNode* {
	assert(0, " :: Parser_ParseAddExpr() :: Un-Implemented");
}

fn Parser_ParseMulExpr(Parser* p) : AstNode* {
	assert(0, " :: Parser_ParseMulExpr() :: Un-Implemented");
}

fn Parser_Expresssion(Parser* p) : AstNode* {
	return Parser_ParseAddExpr(p);
}

fn Parser_ParseTypeExpr(Parser* p) : AstNode* {

	current := Parser_At(p);

	if current.type != Token_Type.IDEN {
		return 0;
	}

	AstNode_TypeExpr* type_expr = Parser_Aloc(p, sizeof(AstNode_TypeExpr));
	type_expr.type = AstNode_Type.TExpr;
	type_expr.kind = AstNode_Kind.Expr;

	type_expr.pointer = 0;
	type_expr.array = 0;
	type_expr.array_pointer = 0;

	type_expr.type_name = Parser_At(p);
	Parser_Consume(p);

	bool loop = 1;

	while loop {

		current = Parser_At(p);

		bool is_pointer = current.type == Token_Type.MULT;

		if is_pointer {
			type_expr.pointer = type_expr.pointer + 1;
			Parser_Consume(p);
		}

		if 0 == is_pointer {
			loop = 0;
		}
	}

	return type_expr;
}

fn Parser_ParseParmDecl(Parser* p) : AstNode* {

	AstNode_ParmDecl* parm_decl = Parser_Aloc(p, sizeof(AstNode_ParmDecl));

	parm_decl.type = AstNode_Type.PDecl;
	parm_decl.kind = AstNode_Kind.Stmt;

	AstNode_TypeExpr* type_expr = Parser_ParseTypeExpr(p);

	if 0 == type_expr {
		return 0;
	}

	current := Parser_At(p);

	if current.type != Token_Type.IDEN {
		return 0;
	}

	parm_decl.type_expr = type_expr;

	parm_decl.symbol = current;

	Parser_Consume(p);

	return parm_decl;
}

fn Parser_ParseFunction(Parser* p) : AstNode* {

	current := Parser_At(p);
	assert(cast(i32 )Is_Fn(current.name), " :: Parser_ParseFunction() :: Nearest token must be a fn");

	Parser_Consume(p);

	AstNode_FuncDecl* func_decl = Parser_Aloc(p, sizeof(AstNode_FuncDecl));

	func_decl.type = AstNode_Type.FDecl;
	func_decl.kind = AstNode_Kind.Stmt;

	func_decl.arguments = StmtList_Make();

	if Parser_Expect(p, Token_Type.IDEN) {
		return 0;
	}

	func_decl.symbol = Parser_At(p);

	Parser_Consume(p);

	if Parser_Expect(p, Token_Type.OPAR) {
		return 0;
	}

	Parser_Consume(p);

	current_tk := Parser_At(p);

	bool loop = current_tk.type != Token_Type.CPAR;
	while loop {

		AstNode_ParmDecl* parm_decl = Parser_ParseParmDecl(p);

		if parm_decl {
			StmtList_Add(&func_decl.arguments, cast(AstNode*)parm_decl);
		}

		current_tk = Parser_At(p);

		if current_tk.type == Token_Type.ENOF {
			return 0;
		}

		if current_tk.type == Token_Type.CPAR {
			loop = 0;
		}

		if current_tk.type == Token_Type.COMM {
			Parser_Consume(p);
		}
	}

	Parser_Consume(p);

	return func_decl;
}

fn Parser_ParseStatement(Parser* p) : AstNode* {

	current := Parser_At(p);
	type := current.type;

	if type == Token_Type.IDEN {

		if Is_Fn(current.name) {
			return Parser_ParseFunction(p);
		}
	}

	Parser_Consume(p);

	return 0;
}

fn Parser_Parse(Parser* p) : AstNode* {

	AstNode_ModuleFile* module = Parser_Aloc(p, sizeof(AstNode_ModuleFile));

	module.type = AstNode_Type.ModFi;
	module.kind = AstNode_Kind.Stmt;

	module.stmts = StmtList_Make();

	while 1 {

		Token current = Parser_At(p);
		bool end_of_file = current.type == Token_Type.ENOF;

		if end_of_file {
			return module;
		}

		AstNode* code = Parser_ParseStatement(p);

		if code {
			StmtList_Add(&module.stmts, code);
		}
	}

	return 0;
}