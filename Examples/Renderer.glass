u64 R2D_QUAD_COUNT 			= 5000;
u64 R2D_VERTECIS_PER_QUAD 	= 4;

fn Renderer2D_init(Renderer2D* r) {

	R2D_INDICES_COUNT := R2D_QUAD_COUNT * 6;

	u64 quad_buffer_size = R2D_VERTECIS_PER_QUAD * sizeof(Vertex);
	quad_buffer_size = quad_buffer_size * R2D_QUAD_COUNT;

	r.quad_vertex_base = malloc(quad_buffer_size);
	r.quad_vertex_pointer = r.quad_vertex_base;
	r.vertex_count = 0;

	quad_v_ly := BufferLayout_Create(Vertex, sizeof(Vertex));
	r.quad_vertex_buffer = VertexBuffer_Create(null, quad_buffer_size);
	r.quad_vertex_array = VertexArray_Create();

	VertexArray_AddVertexBuffer(&r.quad_vertex_array, &r.quad_vertex_buffer, &quad_v_ly);

	r.quad_vertices.data 	= malloc(R2D_VERTECIS_PER_QUAD * sizeof(vec4));
	r.quad_vertices.count 	= R2D_VERTECIS_PER_QUAD;

	r.quad_vertices[0] = Vec4(-0.5, 	-0.5, 	0.0, 	1.0);
	r.quad_vertices[1] = Vec4(0.5, 		-0.5, 	0.0, 	1.0);
	r.quad_vertices[2] = Vec4(0.5, 		0.5, 	0.0, 	1.0);
	r.quad_vertices[3] = Vec4(-0.5, 	0.5, 	0.0, 	1.0);

	r.shader = Shader_Create("Examples/quad.glsl");

	u32[..] quadIndices;
	quadIndices.data = malloc(R2D_INDICES_COUNT * sizeof(u32));
	quadIndices.count = R2D_INDICES_COUNT;

	u32 offset = 0;
	u32 i = 0;

	while i < cast(u32) R2D_INDICES_COUNT
	{
		quadIndices[(i + 0)] = offset + 0;
		quadIndices[(i + 1)] = offset + 1;
		quadIndices[(i + 2)] = offset + 2;
		quadIndices[(i + 3)] = offset + 2;
		quadIndices[(i + 4)] = offset + 3;
		quadIndices[(i + 5)] = offset + 0;

		offset = offset + 4;
		i = i + 6;
	}

	r.quad_index_buffer = IndexBuffer_Create(quadIndices);


	stbtt_fontinfo font_info;

	font_file := open_file("C://Windows/Fonts/Arial.ttf", File_Open_Mode.Read);
	font_file_contents := read_entire_file(font_file);
	close_file(font_file);

	i32 font_result = stbtt_InitFont(&font_info, cast(u8*) font_file_contents.data, stbtt_GetFontOffsetForIndex(cast(u8*)font_file_contents.data,0));

	u64 width  =	512;
	u64 height =	256;

	u64 start_char 	= 32;
	u64 num_chars 	= 96;

	u8* bitmap = cast(u8*) malloc(width * height);

	stbtt_bakedchar* chars
		= cast(stbtt_bakedchar*) malloc(num_chars * sizeof(stbtt_bakedchar));

	i32 bake_result = stbtt_BakeFontBitmap(cast(u8*) font_file_contents.data, 0,
			12.0,
			bitmap, cast(i32) width, cast(i32) height,
			cast(i32) start_char, cast(i32) num_chars,
			chars
		);

	print("Bake Result: %\n", bake_result);

	u8[..] atlas_data;
	atlas_data.data = malloc(width * height * 3);
	atlas_data.count = width * height;

	for 0..width * height {
		atlas_data[it_index] = bitmap[it_index];
		atlas_data[(it_index + 1)] = bitmap[it_index];
		atlas_data[(it_index + 2)] = bitmap[it_index];
	}

	r.font_atlas = Texture_Create(cast(u32) width, cast(u32) height, atlas_data, TextureFormat.RGB8);

	Texture_Bind(&r.font_atlas);
}

fn Renderer2D_flush(Renderer2D* r) {
	//Draw

	IndexBuffer_Bind(&r.quad_index_buffer);
	VertexArray_Bind(&r.quad_vertex_array);

	u64 buffer_size = r.vertex_count * sizeof(Vertex);

	glBufferSubData(
		GL_ARRAY_BUFFER,
		0,
		buffer_size,
		r.quad_vertex_base
	);

	Shader_Bind(&r.shader);
	Shader_SetMat4(&r.shader, "u_ViewProjection", &r.projection);
	Shader_SetInt(&r.shader, "u_Tex", 0);

	//@Note we are not resetting the ssa counter after firstpass()

	glDrawElements(GL_TRIANGLES, cast(u32) r.index_count, GL_UNSIGNED_INT, null);

	r.quad_vertex_pointer = r.quad_vertex_base;

	r.vertex_count = 0;
	r.index_count = 0;
}

fn Renderer2D_draw_quad(Renderer2D* r, vec2 position, vec2 size) {

	Vertex* qvp = cast(Vertex*) r.quad_vertex_pointer;

	for 0..R2D_VERTECIS_PER_QUAD
	{
		t := translation(Vec3(position.x + size.x * 0.5, -position.y - size.y * 0.5, 0.0));
		s := scaling(Vec3(size.x, size.y, 1.0));

		ts := s * t;

		vec4 p = ts * r.quad_vertices[it_index];

		vertex := _Vertex(Vec3(p.x, p.y, p.z));

		*qvp = vertex;
		qvp = &qvp[1];
	}

	r.quad_vertex_pointer = cast(void*) qvp;

	r.vertex_count = r.vertex_count + R2D_VERTECIS_PER_QUAD;
	r.index_count = r.index_count + 6;
}

fn Renderer2D_begin(Renderer2D* r, mat4 p) {
	r.projection = p;
}

struct Vertex {
	vec3 position;
};

struct Renderer2D
{
	void* 			quad_vertex_base;
	void* 			quad_vertex_pointer;
	u64 			vertex_count;
	u64 			index_count;

	VertexBuffer 	quad_vertex_buffer;
	VertexArray 	quad_vertex_array;
	IndexBuffer 	quad_index_buffer;

	vec4[..]  		quad_vertices;

	mat4 			projection;

	Shader 			shader;

	Texture 		font_atlas;
};

fn _Vertex(vec3 pos) : Vertex {
	Vertex v;
	v.position = pos;
	return v;
}