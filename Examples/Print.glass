
fn ansi_red() {
	printf("\e[1;31m");
}

fn ansi_yellow() {
	printf("\e[1;33m");
}

fn ansi_green() {
	printf("\e[1;32m");
}

fn ansi_green_u() {
	printf("\e[1;32m");
}

fn ansi_c_u() {
	printf("\e[1;36m");
}

fn ansi_clear() {
	printf("\e[0m");
}

fn print_s_int(i64 signed, u64 bit_size) {

	if bit_size == 8 {
		i8 i_8 = cast(i8) signed;
		printf("%i", i_8);
	}

	if bit_size == 16 {
		i16 i_16 = cast(i16) signed;
		printf("%i", i_16);
	}

	if bit_size == 32 {
		i32 i_32 = cast(i32) signed;
		printf("%i", i_32);
	}

	if bit_size == 64 {
		i64 i_64 = cast(i64) signed;
		printf("%i", i_64);
	}
}

fn print_u_int(u64 unsigned, u64 bit_size) {

	if bit_size < 32 {
		u32 u_32 = cast(u32) unsigned;
		printf("%u", u_32);
	}

	if bit_size > 32 {
		u64 u_64 = cast(u64) unsigned;
		printf("%zu", u_64);
	}
}

fn print_float(f32 flt) {
	printf("%f", flt);
}

fn print_double(f64 flt) {
	printf("%f", flt);
}

fn print_string(u8* str) {
	printf("%s", str);
}

fn print_address(void* addr) {
	printf("%x", addr);
}

fn print_any(Any any, i32 indent) : i32 {

	TypeInfo* typeinfo = type_info(any.type);

	i64 zero = 0;

	// Base Types
	if typeinfo.flags & TypeInfo_Flags.BASE_TYPE {

		if typeinfo.flags & TypeInfo_Flags.NUMERIC_TYPE {

			//Strings
			if any.type == u8* {
				print_string(*cast(u8**)any.data);
			}

			//Numbers

			if any.type != u8* {
				if typeinfo.flags & TypeInfo_Flags.FLOATING_TYPE {
					if typeinfo.size == 4 {
						f32 flt = *cast(f32*) any.data;
						print_float(flt);
					}

					if typeinfo.size == 8 {
						f64 flt = *cast(f64*) any.data;
						print_double(flt);
					}
				}

				if (typeinfo.flags & TypeInfo_Flags.FLOATING_TYPE) == zero {

					if (typeinfo.flags & TypeInfo_Flags.UNSIGNED_TYPE) == zero {
						print_s_int(*cast(i64*) any.data, typeinfo.size * 8);
					}

					if typeinfo.flags & TypeInfo_Flags.UNSIGNED_TYPE {
						print_u_int(*cast(u64*) any.data, typeinfo.size * 8);
					}
				}
			}

		}

		if any.type == void* {
			print_address(*cast(void**)any.data);
		}
	}

	if typeinfo.flags & TypeInfo_Flags.STRUCT {

		i8* base_ptr = cast(i8*) any.data;
		TypeInfo_Struct* type_info_struct = cast(TypeInfo_Struct*) typeinfo;

		u64 member_it = 0;

		printf("%s :: struct {\n", type_info_struct.name);

		while member_it < type_info_struct.member_count {

			TypeInfo_Member member = type_info_struct.members[member_it];

			u8* member_ptr = cast(u8*) &base_ptr[member.offset];

			Any struct_any;
			struct_any.data = cast(void*) member_ptr;
			struct_any.type = member.type;

			for 0..indent {
				printf("  ");
			}

			printf("%s: ", member.name);

			i32 new_indentation = indent + 1;

			print_any(struct_any, new_indentation);
			printf(";\n");

			member_it = member_it + 1;
		}

		if indent > 0 {
			for 0..indent-1 {
				printf("  ");
			}
		}

		printf("}");
	}

	return 0;
}

fn print(Any... args) {

	Any* arguments = cast(Any*) args.data;

	Any fmt_arg = arguments[0];
	u8* fmt_string = *cast(u8**) fmt_arg.data;

	i32 format_char_count = strlen(fmt_string);
	i32 format_it = 0;

	u8 current_char = 0;

	Any current_argument;
	TypeInfo current_argument_typeinfo;

	u64 argument_count = args.count;
	u64 argument_it = 0;

	while format_it < format_char_count {

		current_char = fmt_string[format_it];

		u8 modulo = "%"[0];

		if current_char == modulo {
			argument_it = argument_it + 1;
			current_argument = arguments[argument_it];
			print_any(current_argument, 0);
		}

		if current_char != "%"[0] {
			putchar(current_char);
		}

		format_it = format_it + 1;
	}
}

// This is very very buggy
//fn print(Any... args) : i32 {
//	print_any_array(args);
//	return 0;
//}

fn assert(i32 condition, u8* message) {
    if condition == 0 {
        print("[ASSERT] Failed :: %\n", message);
        abort();
    }
}