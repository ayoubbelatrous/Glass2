#foreign fn printf!(u8* fmt) : i32 {};
#foreign fn strlen(u8* str) : i32 {};
#foreign fn putchar(u8 c) : void {};

fn ansi_red() {
	printf("\e[1;31m");
}

fn ansi_yellow() {
	printf("\e[1;33m");
}

fn ansi_green() {
	printf("\e[1;32m");
}

fn ansi_green_u() {
	printf("\e[1;32m");
}

fn ansi_c_u() {
	printf("\e[1;36m");
}

fn ansi_clear() {
	printf("\e[0m");
}

fn print_s_int(i64 signed) {
	printf("%i", signed);
}

fn print_u_int(u64 unsigned) {
	printf("%u", unsigned);
}

fn print_float(f32 flt) {
	printf("%f", flt);
}

fn print_string(u8* str) {
	printf("%s", str);
}

fn print_any(Any any) : i32 {

	TypeInfo* typeinfo = type_info(any.type);

	i64 zero = 0;

	// Base Types
	if typeinfo.flags & TypeInfo_Flags.BASE_TYPE {

		if typeinfo.flags & TypeInfo_Flags.NUMERIC_TYPE {

			//Strings
			if any.type == u8* {
				print_string(*cast(u8**)any.data);
			}

			//Numbers

			if any.type != u8* {
				if typeinfo.flags & TypeInfo_Flags.FLOATING_TYPE {
					f32 flt = *cast(f32*) any.data;
					print_float(flt);
				}

				if (typeinfo.flags & TypeInfo_Flags.FLOATING_TYPE) == zero {

					if (typeinfo.flags & TypeInfo_Flags.UNSIGNED_TYPE) == zero {
						print_s_int(*cast(i64*) any.data);
					}

					if typeinfo.flags & TypeInfo_Flags.UNSIGNED_TYPE {
						print_u_int(*cast(u64*) any.data);
					}
				}
			}

		}
	}

	if typeinfo.flags & TypeInfo_Flags.STRUCT {

		i8* base_ptr = cast(i8*) any.data;
		TypeInfo_Struct* type_info_struct = cast(TypeInfo_Struct*) typeinfo;

		u64 member_it = 0;

		printf("{:%s: ", type_info_struct.name);

		while member_it < type_info_struct.member_count {

			if member_it != zero {
				printf(", ");
			}

			TypeInfo_Member member = type_info_struct.members[member_it];

			u8* member_ptr = &base_ptr[member.offset];

			Any struct_any;
			struct_any.data = cast(void*) member_ptr;
			struct_any.type = member.type;

			printf("%s: ", member.name);
			print_any(struct_any);

			member_it = member_it + 1;
		}

		printf(" }");
	}

	return 0;
}

fn print(Any... args) : i32 {

	Any* arguments = cast(Any*) args.data;

	Any fmt_arg = arguments[0];
	u8* fmt_string = cast(u8*) fmt_arg.data;

	i32 format_char_count = strlen(fmt_string);
	i32 format_it = 0;

	u8 current_char = 0;

	Any current_argument;
	TypeInfo current_argument_typeinfo;

	u64 argument_count = args.count;
	u64 argument_it = 0;

	while format_it < format_char_count {

		current_char = fmt_string[format_it];

		if current_char == "%"[0] {
			argument_it = argument_it + 1;
			current_argument = arguments[argument_it];
			print_any(current_argument);
		}

		if current_char != "%"[0] {
			putchar(current_char);
		}

		format_it = format_it + 1;
	}

	return 0;
}