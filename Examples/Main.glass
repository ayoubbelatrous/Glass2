#foreign fn InitWindow(i32 w, i32 h, u8* title) : void {}
#foreign fn WindowShouldClose() : i32 {}

#foreign fn BeginDrawing() : void {}
#foreign fn EndDrawing() : void {}

struct Color {
    u8 r;
    u8 g;
    u8 b;
    u8 a;
};

fn _Color(f32 r, f32 g, f32 b, f32 a) : Color {
    Color color;

    color.r = r * 255;
    color.g = g * 255;
    color.b = b * 255;
    color.a = a * 255;

    return color;
}

struct Rectangle {
    float x;
    float y;
    float width;
    float height;
};

struct Texture {
    int id;
    int width;
    int height;
    int mipmaps;
    int format;
};

struct Font {
    int baseSize;
    int glyphCount;
    int glyphPadding;
    Texture texture;
    void *recs;
    void *glyphs;
};

#foreign fn ClearBackground(Color color) : void {}
#foreign fn DrawRectangle(int posX, int posY, int width, int height, Color color) : void {}

#foreign fn DrawText(u8* text, int posX, int posY, int fontSize, Color color) : void {}
#foreign fn DrawTextEx(Font font, u8* text, vec2 position, f32 fontSize, f32 spacing, Color tint) : void {}

#foreign fn SetTargetFPS(i32 target) : void {}
#foreign fn DrawFPS(int posX, int posY) : void {}

#foreign fn LoadFont(u8* path) : Font {}
#foreign fn LoadFontEx(u8* path, i32 font_size, i32* font_chars, int glyph_count) : Font {}

#foreign struct nk_context {i32 null0;};

struct nk_rect
{
    f32 x;
    f32 y;

    f32 width;
    f32 height;
};

enum #flags Panel_Flags {
    NK_WINDOW_BORDER            ;
    NK_WINDOW_MOVABLE           ;
    NK_WINDOW_SCALABLE          ;
    NK_WINDOW_CLOSABLE          ;
    NK_WINDOW_MINIMIZABLE       ;
    NK_WINDOW_NO_SCROLLBAR      ;
    NK_WINDOW_TITLE             ;
    NK_WINDOW_SCROLL_AUTO_HIDE  ;
    NK_WINDOW_BACKGROUND        ;
    NK_WINDOW_SCALE_LEFT        ;
    NK_WINDOW_NO_INPUT          ;
};

enum #flags Align_Flags {
    NK_TEXT_ALIGN_LEFT    ;
    NK_TEXT_ALIGN_CENTERED;
    NK_TEXT_ALIGN_RIGHT   ;
    NK_TEXT_ALIGN_TOP     ;
    NK_TEXT_ALIGN_MIDDLE  ;
    NK_TEXT_ALIGN_BOTTOM  ;
};

fn _Rect(f32 x, f32 y, f32 w, f32 h) : nk_rect{
    nk_rect rect;

    rect.x = x;
    rect.y = y;

    rect.width = w;
    rect.height = h;

    return rect;
};

#foreign fn InitNuklear(f32 font_size) : nk_context* {}
#foreign fn InitNuklearEx(Font font ,f32 font_size) : nk_context* {}
#foreign fn DrawNuklear(nk_context* ctx) : void {}
#foreign fn UpdateNuklear(nk_context* ctx) : void {}

#foreign fn nk_begin(nk_context* ctx, u8* title, nk_rect rect, i32 flags) : bool {}
#foreign fn nk_end(nk_context* ctx) : void {}

#foreign fn nk_layout_row_dynamic(nk_context* ctx, f32 height, i32 cols) : void {}

#foreign fn nk_label(nk_context* ctx, u8* text, i32 align) : void {}

i32 global;

fn main() {

    global = 30;

    print("Hello World: %",global);

    InitWindow(500, 700, "Hello Window");

    SetTargetFPS(240);

    font := LoadFontEx("fonts/CascadiaMono.ttf",18, 0, 0);

    ctx := InitNuklearEx(font, 18);

    while WindowShouldClose() == 0 {

        UpdateNuklear(ctx);

        i32 window_flags = Panel_Flags.NK_WINDOW_MOVABLE
            | Panel_Flags.NK_WINDOW_TITLE
            | Panel_Flags.NK_WINDOW_SCALABLE
            | Panel_Flags.NK_WINDOW_BORDER
            | Panel_Flags.NK_WINDOW_CLOSABLE
            | Panel_Flags.NK_WINDOW_MINIMIZABLE;

        if nk_begin(ctx, "Demo", _Rect(30,30,100,200), window_flags) {
            nk_layout_row_dynamic(ctx, 0, 2);
                nk_label(ctx, "Hello", Align_Flags.NK_TEXT_ALIGN_LEFT);
        }
        nk_end(ctx);

        BeginDrawing();
        ClearBackground(_Color(0.5, 0.5, 0.5, 1));

            DrawNuklear(ctx);

            DrawFPS(5,5);

            DrawTextEx(font, "Hello World", Vec2(20,100), 18, 0.1, _Color(0.5, 0.0, 0.5, 1));

        EndDrawing();
    }
}