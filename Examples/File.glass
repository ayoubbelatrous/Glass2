enum #flags File_Open_Mode {
	Read ;
	Write;
};

enum File_Seek_Mode
{
	SET;
	CUR;
	END;
};

fn open_file(u8* path, File_Open_Mode mode) : u64* {

	i32 mode_buffer = 0;
	u8* open_mode = cast(u8*) &mode_buffer;

	u8 i = 0;
	if mode | File_Open_Mode.Read {
		open_mode[i] = "r"[0];
		i = i + 1;
	}

	if mode | File_Open_Mode.Write {
		open_mode[i] = "w"[0];
		i = i + 1;
	}

	file := fopen(path, open_mode);

	return file;
}

fn close_file(u64* file) {
	fclose(file);
}

fn get_file_size(u64* file) : u64 {
	assert(cast(i32)file," :: get_file_size() :: file is null");

	fseek(file, 0, cast(i32) File_Seek_Mode.END);
    file_size := ftell(file);
    fseek(file, 0, cast(i32) File_Seek_Mode.SET);

	return file_size;
}

fn read_entire_file(u64* file, u64* size) : u8[..] {

	assert(cast(i32) file," :: read_entire_file() :: file is null");

	file_size := get_file_size(file);

	u8* buffer = cast(u8*) malloc(file_size + 1);

	fread(buffer, 1, file_size, file);

	*size = file_size;

	buffer[file_size] = cast(u8) 0;

	u8[..] array;
	array.data = cast(void*) buffer;
	array.count = file_size;

	return array;
}

fn read_entire_file(u64* file) : u8[..] {
	u64 discard;
	return read_entire_file(file, &discard);
}