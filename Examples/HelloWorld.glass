#foreign fn malloc(u64 size) : void* {};
#foreign fn free(void* ptr) : void {};

#foreign struct GLFWwindow{};

#foreign fn glfwInit() : i32 {};
#foreign fn glfwCreateWindow(i32 w, i32 h, u8* name, void* share, void* monitor) : GLFWwindow* {};
#foreign fn glfwMakeContextCurrent(GLFWwindow* wnd) : void {};
#foreign fn glfwWindowShouldClose(GLFWwindow* wnd) : i32 {};

#foreign fn glfwPollEvents() : void {};
#foreign fn glfwSwapBuffers(GLFWwindow* wnd) : void {};

struct Vertex {
	vec2 position;
	vec2 uv;
	vec4 color;
};

struct Renderer2D
{
	Vertex* base;
	Vertex* current;
};

fn Renderer2D_init(Renderer2D* r) {
	r.base = cast(Vertex*) malloc((sizeof(Vertex) * 4) * (1024 * 10));
	r.current = r.base;
}

fn Renderer2D_deinit(Renderer2D* r) {
	free(cast(void*) r.base);
	r.base 		= cast(Vertex*) null;
	r.current 	= cast(Vertex*) null;
}

fn Renderer2D_flush(Renderer2D* r) {
	r.current = r.base;
}

struct Application {
	Renderer2D* r;
};

Application a;

fn Application_Init() : void {
	a.r = cast(Renderer2D*) null;
	print("Inited Application\n");
}

fn test() : i32 {
	printf("Hello from pointer!!\n");
	return 450;
}

fn main() : i32 {

	i32 init_result = glfwInit();

	Application_Init();

	if init_result == 0 {
		printf("Error Initilizaing GLFW\n");
		//return 0;
	}

	i32 COLOR_BUF_BIT = 16384;
	i32 GL_TRIANGLES = 	4;

	GLFWwindow* window = glfwCreateWindow(500, 700, "A Window", null, null);
	glfwMakeContextCurrent(window);

	InitGL();

	while glfwWindowShouldClose(window) == 0 {
		glClearColor(0.1, 0.16, 0.15, 1.0);
		glClear(COLOR_BUF_BIT);

		glBegin(GL_TRIANGLES);

			glVertex2f(0.5,0.0);
			glVertex2f(0.5,0.5);
			glVertex2f(0.0,0.5);

		glEnd();

		glfwPollEvents();
		glfwSwapBuffers(window);
	}

	return 0;
}