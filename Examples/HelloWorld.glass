//#foreign fn malloc(u64 size) : void* {};
//#foreign fn free(void* ptr) : void {};
//#foreign fn memcpy(void* destination, void* source, u64 num) : void *  {}

struct GLFWwindow{};

#foreign fn glfwInit() : i32 {};
#foreign fn glfwCreateWindow(i32 w, i32 h, u8* name, void* share, void* monitor) : GLFWwindow* {};
#foreign fn glfwMakeContextCurrent(GLFWwindow* wnd) : void {};
#foreign fn glfwWindowShouldClose(GLFWwindow* wnd) : i32 {};

#foreign fn glfwPollEvents() : void {};
#foreign fn glfwSwapBuffers(GLFWwindow* wnd) : void {};

#foreign fn glfwSetWindowSizeCallback(GLFWwindow* window, (GLFWwindow*,i32,i32) callback) : (GLFWwindow*,i32,i32) {};
#foreign fn glfwSetFramebufferSizeCallback(GLFWwindow* window, (GLFWwindow*,i32,i32) callback) : (GLFWwindow*,i32,i32) {};

//function_name(GLFWwindow* window, i32 key, i32 scancode, i32 action, i32 mods) : void
#foreign fn glfwSetKeyCallback(GLFWwindow* window, (GLFWwindow*,i32,i32,i32,i32) callback) : void* {};

struct Application 	{
	Renderer2D 		r;

	bool 			running;

	i32 			WindowWidth;
	i32 			WindowHeight;
};
Application a;


//@Life
fn start() {
	printf("[INFO] :: Started\n");
	Renderer2D_init(&a.r);
}

fn update() {

	f32 width 		= cast(f32) a.WindowWidth;
	f32 height 		= cast(f32) a.WindowHeight;

	mat4 projection = ortho(-width*0.5, width*0.5, -height*0.5, height*0.5,0.0 - 1.0, 1.0);
	projection = translation(Vec3(
		-width * 0.5,height * 0.5,0.0
	)) * projection;

	Renderer2D_begin(&a.r, projection);

	f32 posx = 0.1;
	f32 posy = 0.1;

	Renderer2D_draw_quad(&a.r, Vec2(50.0, 50.0), Vec2(100.0, 60.0));

	Renderer2D_flush(&a.r);
}

//@BoilerPlate

fn Application_Init() : void {
	print("Inited Application\n");
}

fn resize_cb(GLFWwindow* w, i32 width, i32 height) {
	a.WindowWidth 	= width;
	a.WindowHeight	= height;
	glViewport(0, 0, width, height);
}

fn key_cb(GLFWwindow* window, i32 key, i32 scancode, i32 action, i32 mods) : void {
	if key == 256 {
		a.running = 0;
	}
}

fn main() : i32 {

	a.running = 1;

	i32 init_result = glfwInit();

	Application_Init();

	if init_result == 0 {
		printf("Error Initilizaing GLFW\n");
	}

	a.WindowWidth 	= 700;
	a.WindowHeight	= 1000;

	GLFWwindow* window
		= glfwCreateWindow(a.WindowWidth, a.WindowHeight, "A Window", null, null);

	glfwSetKeyCallback(window, key_cb);
	glfwSetWindowSizeCallback(window, resize_cb);

	glfwMakeContextCurrent(window);
	InitGL();

	start();

	while a.running {

		glClearColor(0.1, 0.16, 0.15, 1.0);
		glClear(GL_COLOR_BUFFER_BIT);

		update();

		glfwPollEvents();
		glfwSwapBuffers(window);

		a.running = a.running and glfwWindowShouldClose(window) == 0;
	}

	return 0;
}

fn main2() : i64 {
	i32 bb = 0;
	return 10;
}