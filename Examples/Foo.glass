#load "C.glass";
#load "Memory.glass";
#load "Print.glass";

struct string {
	u8* data;
	u64 count;
};

struct vec3
{
	i32 x;
	i32 y;
	i32 z;
};

struct Entity {
	i32 id;
	vec3 pos;
	vec3 rot;
	vec3 sca;
};

fn Take_Any(Any any) {

	Entity entity;

	Entity* data = cast(Entity*) any.data;
	Entity i = *data;

	*data = entity;
}
fn Take_Many(Entity e1, Entity e2, Entity e3, Entity e4, Entity e5) : Entity {
	return e1;
}

fn main2() : i32 {

	Entity entity;
	Take_Many(entity,entity,entity,entity,entity);

	return 0;
}

fn test_typeof() {
	i32 x = 0;
	type := *typeof(Type);
	printf("TypeName: %s\n", type.name);
}

fn pointer_test() {

	printf("Pointer Test:\n");

	vec3* vp = xx malloc(sizeof(vec3));

	vp.x = 100;
	vp.y = 200;
	vp.z = 300;

	printf("	v.x : %i\n", vp.x);
	printf("	v.y : %i\n", vp.y);
	printf("	v.z : %i\n", vp.z);
}

fn array_test() : i32 {

	i32* ptr_array = xx malloc(sizeof(i32) * 10);

	for 0..10 {
		ptr_array[it_index] = it * 10;
	}

	printf("Pointer Array Test:\n");

	for 0..10 {
		printf("PtrArray[%i] :: %i\n", it_index, ptr_array[it_index]);
	}

	printf("[..] Array Test\n");

	i32[..] array;
	array.data = malloc(sizeof(i32) * 10);
	array.count = 10;

	for 0..10 {
		array[it_index] = it * 10;
	}

	for array {
		printf("PtrArray[%i] :: %i\n", it_index, it);
	}

	return 0;
}

fn Make_Entity(vec3 pos, vec3 rot , vec3 sca) : Entity {
	Entity entity;
	entity.pos = pos;
	entity.rot = rot;
	entity.sca = sca;
	return entity;
}

fn Vec3(i32 x, i32 y, i32 z) : vec3 {
	vec3 v;
	v.x = x;
	v.y = y;
	v.z = z;
	return v;
}

fn Vec3S(i32 s) : vec3 {
	vec3 v;
	v.x = s;
	v.y = s;
	v.z = s;
	return v;
}

fn PrintVec3(vec3* v) {
	printf("Vec: {%i, %i, %i}\n", v.x,v.y,v.z);
}

fn PrintEntity(Entity* e) {
	printf("Entity:\n");
	printf("Pos: ");
	PrintVec3(&e.pos);
	printf("Rot: ");
	PrintVec3(&e.rot);
	printf("Sca: ");
	PrintVec3(&e.sca);
}

fn member_test() {
	printf("Member Access Test:\n");
	Entity e = Make_Entity(Vec3S(69), Vec3S(420), Vec3S(420 + 69));
	PrintEntity(&e);
}

fn PassAsAny(Any any) {

	u8* test = "str";

	Type type = u8;

	printf("Any.type :: %i\n", type);
	printf("Any.type_name :: %s\n", type_info(type).name);

}

fn many_args(i32 x, i32 y, i32 z, i32 w, i32 v) {
	printf("Value: %i\n", v);
}

fn many_args(i32 x, i32 y, i32 z) {
	printf("Value: %i\n", x);
}

fn var_args(Any... args) {
	for args {
		printf("IT: %s\n", type_info(it.type).name);
		printf("var_args any.type: %i\n", it.type);
		printf("var_args any.type_name: %s\n", type_info(it.type).name);
	}
}

i32 data2;
Entity* entity2;

fn func_ptr_test(i32 x, i32 y, i32 z, i32 w, i32 z) {
	printf("Hello From Pointer",x,y,z,w);
}

fn main() : i32 {

	ptr := func_ptr_test;

	ptr(10,20,30,40,50);

	entity_ti := cast(TypeInfo_Struct*) type_info(Entity);

	member := entity_ti.members[0];

	vec3 test_data;

	print("Member: %\n", test_data);

	printf("Name: %s\n", member.name);

	for entity_ti.members {

	}

	i32* data_ptr = &data2;

	bool and_test = 20 and 1;
	bool or_test = 	0 or 0;

	if and_test {
		print("Logical And: True\n");
	}

	if or_test {
		print("Logical Or: True\n");
	}

	func := func_ptr_test;

	//func();

	many_args(10,20,30);
	many_args(10,20,30,40,50);

	entity2 = xx malloc(sizeof(Entity));

	entity2.id = 30*60;

	print("Hello World from var_args print: %\n", entity2.id);

	i32 pointee = 5;
	i32* i32_ptr = &pointee;

	i32 a = 0;
	i32 b = 50;

	printf("a = %i, b = %i\n", a, b);
	printf("a & b: %p\n", a & b);
	printf("a | b: %p\n", a | b);

	var_args("Hello World", 50,50,50);

	i64 big_int = 50;
	i64 small_int = xx big_int;

	PassAsAny(&small_int);

	array_test();
	pointer_test();
	member_test();

	i64 integer = -50;
	f64 d = xx integer;

	printf("Floats: %f, %f, %f, %f, %f\n", d, d, d, d, d);

	printf("Random: %i\n", srand(time(xx null)));

	test_floats();

	return 0;
}

fn take_float(f32 r, f32 g, f32 b, f32 a, f32 opacity) {
	f32 test = 10.33;
	printf("Floats: %f, %f, %f, %f, %f", r, g, b, a, opacity);
}

fn test_floats() {
	take_float(50.0,40.0,30.0,20.0,69.99);
}