#foreign fn printf!(u8* format) : i32 {}

#foreign fn fopen(u8* path,u8* mode) : u64* {}
#foreign fn fclose(u64* file) : void {}

#foreign fn malloc(i32 size) : void* {}
#foreign fn free(void* ptr) : void {}

struct GLFWwindow{
   i32 null0;
};

#foreign fn glfwCreateWindow(i32 width,i32 height,u8* title,i32* monitor,i32* display) : GLFWwindow* {};
#foreign fn glfwInit() : void {};
#foreign fn glfwMakeContextCurrent(GLFWwindow* window) : void {};
#foreign fn glfwSwapBuffers(GLFWwindow* window) : void {};
#foreign fn glfwPollEvents() : void {};
#foreign fn glfwGetError(u8* desc) : i32 {};
#foreign fn glfwWindowShouldClose(GLFWwindow* window) : i32 {};
#foreign fn glfwGetKey(GLFWwindow* window,i32 keyCode) : i32 {};

#foreign fn glClearColor(f32 r,f32 g, f32 b, f32 a) : void {};
#foreign fn glClear(i32 mask) : void {};

fn main() : i32 {

   i32 KEY_ESCAPE = 256;
   i32 GL_COLOR_BUFFER_BIT = 16384;

   glfwInit();
   i32 *nullptr = 0;

   GLFWwindow* window;

   window = glfwCreateWindow(400,400,"Hello",nullptr, nullptr);

   glfwMakeContextCurrent(window);

   while 1 {

      glClearColor(0.5,0.5,0.5,0.5);
      glClear(GL_COLOR_BUFFER_BIT);

      glfwSwapBuffers(window);
      glfwPollEvents();


      if(glfwWindowShouldClose(window)){
         break;
      }

      if glfwGetKey(window,KEY_ESCAPE) {
         break;
      }
   }
}