#foreign fn printf!(u8 * format) : i32{}
#foreign fn sprintf!(u8 * format, u8 * buffer) : i32{}

struct vec2
{
	f32 x;
	f32 y;
};

struct vec3
{
	f32 x;
	f32 y;
	f32 z;
};

struct vec4
{
	f32 x;
	f32 y;
	f32 z;
	f32 w;
};

fn add_vec3(vec3 lhs, vec3 rhs) : vec3
{
	vec3 result;
	result.x = lhs.x + rhs.x;
	result.y = lhs.y + rhs.y;
	result.z = lhs.z + rhs.z;
	return result;
}

fn sub_vec3(vec3 lhs, vec3 rhs) : vec3
{
	vec3 result;
	result.x = lhs.x - rhs.x;
	result.y = lhs.y - rhs.y;
	result.z = lhs.z - rhs.z;
	return result;
}

fn mul_vec3(vec3 lhs, vec3 rhs) : vec3
{
	vec3 result;
	result.x = lhs.x * rhs.x;
	result.y = lhs.y * rhs.y;
	result.z = lhs.z * rhs.z;
	return result;
}

fn div_vec3(vec3 lhs, vec3 rhs) : vec3
{
	vec3 result;
	result.x = lhs.x / rhs.x;
	result.y = lhs.y / rhs.y;
	result.z = lhs.z / rhs.z;
	return result;
}

fn add_vec3_f32(vec3 lhs, float rhs) : vec3
{
	vec3 result;
	result.x = lhs.x + rhs;
	result.y = lhs.y + rhs;
	result.z = lhs.z + rhs;
	return result;
}

fn add_vec3_float(vec3 lhs, float rhs) : vec3
{
	vec3 result;
	result.x = lhs.x + rhs;
	result.y = lhs.y + rhs;
	result.z = lhs.z + rhs;
	return result;
}

fn add_vec4(vec4 lhs, vec4 rhs) : vec4
{
	vec4 result;
	result.x = lhs.x + rhs.x;
	result.y = lhs.y + rhs.y;
	result.z = lhs.z + rhs.z;
	result.w = lhs.w + rhs.w;
	return result;
}

fn sub_vec4(vec4 lhs, vec4 rhs) : vec4
{
	vec4 result;
	result.x = lhs.x - rhs.x;
	result.y = lhs.y - rhs.y;
	result.z = lhs.z - rhs.z;
	result.w = lhs.w - rhs.w;
	return result;
}

fn mul_vec4(vec4 lhs, vec4 rhs) : vec4
{
	vec4 result;
	result.x = lhs.x * rhs.x;
	result.y = lhs.y * rhs.y;
	result.z = lhs.z * rhs.z;
	result.w = lhs.w * rhs.w;
	return result;
}

fn div_vec4(vec4 lhs, vec4 rhs) : vec4
{
	vec4 result;
	result.x = lhs.x / rhs.x;
	result.y = lhs.y / rhs.y;
	result.z = lhs.z / rhs.z;
	result.w = lhs.w / rhs.w;
	return result;
}

fn add_vec4_f32(vec4 lhs, float rhs) : vec4
{
	vec4 result;
	result.x = lhs.x + rhs;
	result.y = lhs.y + rhs;
	result.z = lhs.z + rhs;
	result.w = lhs.w + rhs;
	return result;
}

fn add_vec4_float(vec4 lhs, float rhs) : vec4
{
	vec4 result;
	result.x = lhs.x + rhs;
	result.y = lhs.y + rhs;
	result.z = lhs.z + rhs;
	result.w = lhs.w + rhs;
	return result;
}

#operator+ add_vec3;
#operator- sub_vec3;
#operator* mul_vec3;
#operator/ div_vec3;

#operator+ add_vec3_float;
#operator+ add_vec3_f32;

#operator+ add_vec4;
#operator- sub_vec4;
#operator* mul_vec4;
#operator/ div_vec4;

#operator+ add_vec4_float;
#operator+ add_vec4_f32;

fn Vec2(f32 x, f32 y) : vec2 {
	vec2 res; res.x = x; res.y = y;
	return res;
}

fn Vec3(f32 x, f32 y, f32 z) : vec3 {
	vec3 res; res.x = x; res.y = y; res.z = z;
	return res;
}

fn Vec4(f32 x, f32 y, f32 z, f32 w) : vec4 {
	vec4 res; res.x = x; res.y = y; res.z = z; res.w = w;
	return res;
}