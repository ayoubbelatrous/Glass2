struct vec2
{
	f32 x;
	f32 y;
};

struct vec3
{
	f32 x;
	f32 y;
	f32 z;
};

struct vec4
{
	f32 x;
	f32 y;
	f32 z;
	f32 w;
};

struct mat4
{
	f32 x0;
	f32 y0;
	f32 z0;
	f32 w0;

	f32 x1;
	f32 y1;
	f32 z1;
	f32 w1;

	f32 x2;
	f32 y2;
	f32 z2;
	f32 w2;

	f32 x3;
	f32 y3;
	f32 z3;
	f32 w3;
};

//@Hypatia Math

#foreign fn matrix4_multiplyv4(mat4* m, vec4* v, vec4* r) : vec4* {};
#foreign fn matrix4_multiplyv3(mat4* m, vec3* v, vec3* r) : vec3* {};
#foreign fn matrix4_multiplyv2(mat4* m, vec2* v, vec2* r) : vec2* {};
#foreign fn matrix4_identity(mat4* m) : mat4* {};

#foreign fn matrix4_translatev3(mat4* self, vec3* translation) : mat4* {};
#foreign fn matrix4_scalev3(mat4* self, vec3* scale) : mat4* {};

#foreign fn matrix4_multiply(mat4* self, mat4* result) : mat4* {};


#foreign fn matrix4_projection_ortho3d_rh_EXP(mat4* self,
	f32 xmin, f32 xmax,
	f32 ymin, f32 ymax,
	f32 zNear, f32 zFar) : mat4* {};

fn Mat4() : mat4 {
	mat4 r;
	matrix4_identity(&r);
	return r;
}

fn translate(mat4 m, vec3 t) : mat4 {
	mat4 r;
	matrix4_translatev3(&r, &t);
	return r;
}

fn scale(mat4 m, vec3 t) : mat4 {
	mat4 r;
	matrix4_scalev3(&r, &t);
	return r;
}

fn scaling(vec3 t) : mat4 {
	mat4 r;
	r = Mat4();
	matrix4_scalev3(&r, &t);
	return r;
}

fn translation(vec3 t) : mat4 {
	mat4 r;
	r = Mat4();
	matrix4_translatev3(&r, &t);
	return r;
}

fn ortho(f32 xmin, f32 xmax, f32 ymin, f32 ymax, f32 near, f32 far) : mat4 {
	mat4 r;
	matrix4_projection_ortho3d_rh_EXP(&r,xmin,xmax,ymin,ymax,near,far);
	return r;
}
fn m4_m_v3(mat4 m, vec3 v) : vec3 {
	vec3 r;
	matrix4_multiplyv3(&m, &v, &r);
	return r;
}

#operator* m4_m_v3;

fn m4_m_v2(mat4 m, vec2 v) : vec2 {
	vec2 r;
	matrix4_multiplyv2(&m, &v, &r);
	return r;
}
#operator* m4_m_v2;

fn m4_m_v4(mat4 m, vec4 v) : vec4 {
	vec4 r;
	matrix4_multiplyv4(&m, &v, &r);
	return r;
}
#operator* m4_m_v4;

fn m4_m_m4(mat4 lhs, mat4 rhs) : mat4 {
	r := lhs;
	matrix4_multiply(&r , &rhs);
	return r;
}

#operator* m4_m_m4;

//@Vec3
fn add_vec3(vec3 lhs, vec3 rhs) : vec3
{
	vec3 result;
	result.x = lhs.x + rhs.x;
	result.y = lhs.y + rhs.y;
	result.z = lhs.z + rhs.z;
	return result;
}

fn sub_vec3(vec3 lhs, vec3 rhs) : vec3
{
	vec3 result;
	result.x = lhs.x - rhs.x;
	result.y = lhs.y - rhs.y;
	result.z = lhs.z - rhs.z;
	return result;
}

fn mul_vec3(vec3 lhs, vec3 rhs) : vec3
{
	vec3 result;
	result.x = lhs.x * rhs.x;
	result.y = lhs.y * rhs.y;
	result.z = lhs.z * rhs.z;
	return result;
}

fn div_vec3(vec3 lhs, vec3 rhs) : vec3
{
	vec3 result;
	result.x = lhs.x / rhs.x;
	result.y = lhs.y / rhs.y;
	result.z = lhs.z / rhs.z;
	return result;
}

fn add_vec3_f32(vec3 lhs, f32 rhs) : vec3
{
	vec3 result;
	result.x = lhs.x + rhs;
	result.y = lhs.y + rhs;
	result.z = lhs.z + rhs;
	return result;
}

//@Vec4
fn add_vec4(vec4 lhs, vec4 rhs) : vec4
{
	vec4 result;
	result.x = lhs.x + rhs.x;
	result.y = lhs.y + rhs.y;
	result.z = lhs.z + rhs.z;
	result.w = lhs.w + rhs.w;
	return result;
}

fn sub_vec4(vec4 lhs, vec4 rhs) : vec4
{
	vec4 result;
	result.x = lhs.x - rhs.x;
	result.y = lhs.y - rhs.y;
	result.z = lhs.z - rhs.z;
	result.w = lhs.w - rhs.w;
	return result;
}

fn mul_vec4(vec4 lhs, vec4 rhs) : vec4
{
	vec4 result;
	result.x = lhs.x * rhs.x;
	result.y = lhs.y * rhs.y;
	result.z = lhs.z * rhs.z;
	result.w = lhs.w * rhs.w;
	return result;
}

fn div_vec4(vec4 lhs, vec4 rhs) : vec4
{
	vec4 result;
	result.x = lhs.x / rhs.x;
	result.y = lhs.y / rhs.y;
	result.z = lhs.z / rhs.z;
	result.w = lhs.w / rhs.w;
	return result;
}

fn add_vec4_f32(vec4 lhs, f32 rhs) : vec4
{
	vec4 result;
	result.x = lhs.x + rhs;
	result.y = lhs.y + rhs;
	result.z = lhs.z + rhs;
	result.w = lhs.w + rhs;
	return result;
}

//@Vec2
fn add_vec2(vec2 lhs, vec2 rhs) : vec2
{
	vec2 result;
	result.x = lhs.x + rhs.x;
	result.y = lhs.y + rhs.y;
	return result;
}

fn sub_vec2(vec2 lhs, vec2 rhs) : vec2
{
	vec2 result;
	result.x = lhs.x - rhs.x;
	result.y = lhs.y - rhs.y;
	return result;
}

fn mul_vec2(vec2 lhs, vec2 rhs) : vec2
{
	vec2 result;
	result.x = lhs.x * rhs.x;
	result.y = lhs.y * rhs.y;
	return result;
}

fn vec2_scalar(vec2 v, f32 scalar) : vec2
{
	vec2 result;
	result.x = v.x * scalar;
	result.y = v.y * scalar;
	return result;
}

fn div_vec2(vec2 lhs, vec2 rhs) : vec2
{
	vec2 result;
	result.x = lhs.x / rhs.x;
	result.y = lhs.y / rhs.y;
	return result;
}

#operator+ add_vec3;
#operator- sub_vec3;
#operator* mul_vec3;
#operator/ div_vec3;

#operator+ add_vec3_f32;

#operator+ add_vec4;
#operator- sub_vec4;
#operator* mul_vec4;
#operator/ div_vec4;

#operator+ add_vec2;
#operator- sub_vec2;
#operator* mul_vec2;
#operator/ div_vec2;

#operator* vec2_scalar;

#operator+ add_vec4_f32;

fn Vec2(f32 x, f32 y) : vec2 {
	vec2 res; res.x = x; res.y = y;
	return res;
}

fn Vec2(f32 scalar) : vec2 {
	vec2 res; res.x = scalar; res.y = scalar;
	return res;
}

fn Vec3(f32 scalar) : vec3 {
	v := Vec3(scalar, scalar, scalar);
	return v;
}

fn Vec3(f32 x, f32 y, f32 z) : vec3 {
	vec3 res; res.x = x; res.y = y; res.z = z;
	return res;
}

fn Vec3(f32 x, f32 y) : vec3 {
	vec3 res; res.x = x; res.y = y; res.z = 0.0;
	return res;
}

fn Vec3(vec2 v) : vec3 {
	vec3 res; res.x = v.x; res.y = v.y; res.z = 0.0;
	return res;
}

fn Vec4(f32 x, f32 y, f32 z, f32 w) : vec4 {
	vec4 res; res.x = x; res.y = y; res.z = z; res.w = w;
	return res;
}
